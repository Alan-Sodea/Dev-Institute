-- ----------------------------------------------------------------
--                           Part1                             ----
-- ---------------------------------------------------------------- 


-- 1. Create Tables
Create Customer table
CREATE TABLE Customer (
id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL
);

-- Create Customer Profile table
CREATE TABLE CustomerProfile (
id SERIAL PRIMARY KEY,
isLoggedIn BOOLEAN DEFAULT FALSE,
customer_id INTEGER UNIQUE NOT NULL,
FOREIGN KEY (customer_id) REFERENCES Customer(id) ON DELETE CASCADE
); 

-- 2. Insert Customers
INSERT INTO Customer (first_name, last_name) VALUES
('John', 'Doe'),
('Jerome', 'Lalu'),
('Lea', 'Rive'); 3. Insert Customer Profiles

-- Insert profiles using subqueries
INSERT INTO CustomerProfile (isLoggedIn, customer_id)
SELECT TRUE, id FROM Customer WHERE first_name = 'John';

INSERT INTO CustomerProfile (isLoggedIn, customer_id)
SELECT FALSE, id FROM Customer WHERE first_name = 'Jerome'; 4. Query Results


-- First Name of LoggedIn Customers:
SELECT c.first_name
FROM Customer c
JOIN CustomerProfile cp ON c.id = cp.customer_id
WHERE cp.isLoggedIn = TRUE;


-- All Customers First Name and isLoggedIn Columns:
SELECT c.first_name, COALESCE(cp.isLoggedIn, FALSE) AS isLoggedIn
FROM Customer c
LEFT JOIN CustomerProfile cp ON c.id = cp.customer_id;

-- Number of Customers Not LoggedIn:
SELECT COUNT(\*)
FROM Customer c
LEFT JOIN CustomerProfile cp ON c.id = cp.customer_id
WHERE cp.isLoggedIn IS DISTINCT FROM TRUE;


-- ----------------------------------------------------------------
--                           Part2                             ----
-- ---------------------------------------------------------------- 

-- Create Book table
CREATE TABLE Book (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL
);

-- Create Student table
CREATE TABLE Student (
    student_id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    age INTEGER CHECK (age <= 15)
);

-- Create Library junction table
CREATE TABLE Library (
    book_fk_id INTEGER,
    student_id INTEGER,
    borrowed_date DATE,
    PRIMARY KEY (book_fk_id, student_id),
    FOREIGN KEY (book_fk_id) REFERENCES Book(book_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 2. Insert Books
INSERT INTO Book (title, author) VALUES
('Alice In Wonderland', 'Lewis Carroll'),
('Harry Potter', 'J.K Rowling'),
('To kill a mockingbird', 'Harper Lee');

-- 3. Insert Students
INSERT INTO Student (name, age) VALUES
('John', 12),
('Lera', 11),
('Patrick', 10),
('Bob', 14);

-- 4. Insert Records into Library Table

-- Insert records using subqueries
INSERT INTO Library (book_fk_id, student_id, borrowed_date)
SELECT b.book_id, s.student_id, '2022-02-15'
FROM Book b
JOIN Student s ON s.name = 'John'
WHERE b.title = 'Alice In Wonderland';

INSERT INTO Library (book_fk_id, student_id, borrowed_date)
SELECT b.book_id, s.student_id, '2021-03-03'
FROM Book b
JOIN Student s ON s.name = 'Bob'
WHERE b.title = 'To kill a mockingbird';

INSERT INTO Library (book_fk_id, student_id, borrowed_date)
SELECT b.book_id, s.student_id, '2021-05-23'
FROM Book b
JOIN Student s ON s.name = 'Lera'
WHERE b.title = 'Alice In Wonderland';

INSERT INTO Library (book_fk_id, student_id, borrowed_date)
SELECT b.book_id, s.student_id, '2021-08-12'
FROM Book b
JOIN Student s ON s.name = 'Bob'
WHERE b.title = 'Harry Potter';

-- 5. Query Results
Select All Columns from the Junction Table:

SELECT * FROM Library;
Select Student Names and Borrowed Book Titles:

SELECT s.name, b.title
FROM Library l
JOIN Student s ON l.student_id = s.student_id
JOIN Book b ON l.book_fk_id = b.book_id;
Select Average Age of Students Who Borrowed "Alice In Wonderland":

SELECT AVG(s.age) AS average_age
FROM Library l
JOIN Student s ON l.student_id = s.student_id
JOIN Book b ON l.book_fk_id = b.book_id
WHERE b.title = 'Alice In Wonderland';
Delete a Student and Effect on Junction Table:

-- Delete a student
DELETE FROM Student WHERE name = 'John';